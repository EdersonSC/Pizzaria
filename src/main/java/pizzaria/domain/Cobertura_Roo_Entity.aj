// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pizzaria.domain;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;
import pizzaria.domain.Cobertura;

privileged aspect Cobertura_Roo_Entity {
    
    declare @type: Cobertura: @Entity;
    
    @PersistenceContext
    transient EntityManager Cobertura.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Cobertura.id;
    
    @Version
    @Column(name = "version")
    private Integer Cobertura.version;
    
    public Long Cobertura.getId() {
        return this.id;
    }
    
    public void Cobertura.setId(Long id) {
        this.id = id;
    }
    
    public Integer Cobertura.getVersion() {
        return this.version;
    }
    
    public void Cobertura.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Cobertura.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Cobertura.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Cobertura attached = Cobertura.findCobertura(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Cobertura.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Cobertura Cobertura.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Cobertura merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Cobertura.entityManager() {
        EntityManager em = new Cobertura().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Cobertura.countCoberturas() {
        return entityManager().createQuery("select count(o) from Cobertura o", Long.class).getSingleResult();
    }
    
    public static List<Cobertura> Cobertura.findAllCoberturas() {
        return entityManager().createQuery("select o from Cobertura o", Cobertura.class).getResultList();
    }
    
    public static Cobertura Cobertura.findCobertura(Long id) {
        if (id == null) return null;
        return entityManager().find(Cobertura.class, id);
    }
    
    public static List<Cobertura> Cobertura.findCoberturaEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Cobertura o", Cobertura.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
