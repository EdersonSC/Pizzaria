// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pizzaria.web;

import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import pizzaria.domain.Pedido;
import pizzaria.domain.Pizza;

privileged aspect PedidoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String PedidoController.create(@Valid Pedido pedido, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("pedido", pedido);
            addDateTimeFormatPatterns(model);
            return "pedidoes/create";
        }
        pedido.persist();
        return "redirect:/pedidoes/" + encodeUrlPathSegment(pedido.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PedidoController.createForm(Model model) {
        model.addAttribute("pedido", new Pedido());
        addDateTimeFormatPatterns(model);
        return "pedidoes/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PedidoController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("pedido", Pedido.findPedido(id));
        model.addAttribute("itemId", id);
        return "pedidoes/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PedidoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("pedidoes", Pedido.findPedidoEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Pedido.countPedidoes() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("pedidoes", Pedido.findAllPedidoes());
        }
        addDateTimeFormatPatterns(model);
        return "pedidoes/list";
    }
    
    @ModelAttribute("pizzas")
    public Collection<Pizza> PedidoController.populatePizzas() {
        return Pizza.findAllPizzas();
    }
    
    void PedidoController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("pedido_dataentrega_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String PedidoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
